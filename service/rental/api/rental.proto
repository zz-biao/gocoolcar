syntax = "proto3";
package rental.v1;
option go_package="coolcar/rental/api/gen/v1;rentalpb";

//install 在proto文件夹下
// protoc -I .  --go_out ./gen/v1/ --go_opt paths=source_relative  --go-grpc_out ./gen/v1/  --go-grpc_opt=require_unimplemented_servers=false,paths=source_relative  ./rental.proto

// protoc --go_out=./gen/go/ --go_opt=paths=source_relative  --go-grpc_out=./gen/go/  --go-grpc_opt=paths=source_relative  ./rental.proto

// protoc -I . --grpc-gateway_out=paths=source_relative,grpc_api_configuration=rental.yaml:gen/v1 ./rental.proto


message Location {
  double latitude = 1;
  double longitude = 2;
}
message LocationStatus {
  Location location = 1;
  int32 fee_cent = 2;
  double km_driven = 3;
  string poi_name = 4;
}

enum TripStatus {
  TS_NOT_SPECIFIED = 0;//枚举一定要有一个0
  IN_PROGRESS = 1;
  FINISHED = 2;
}

message Trip {
  string account_id = 1;
  string car_id = 2;
  LocationStatus start = 3;
  LocationStatus current = 4;
  LocationStatus end = 5;
  TripStatus status = 6;
}

message TripEntity {
  string id = 1;
  Trip trip = 2;
}

message CreateTripRequest {
  Location start = 1;
  string  car_id = 2;
}

message GetTripRequest {
  string id = 1;
}

message GetTripsRequest {
  TripStatus status = 1;
}

message GetTripsResponse {
  repeated TripEntity trip = 1;
}

message UpdateTripRequest {
  string id = 1;
  Location current = 2;
  bool end_trip = 3;
}

service TripService{
  rpc CreateTrip (CreateTripRequest) returns (TripEntity);
  rpc GetTrip (GetTripRequest) returns(Trip);
  rpc GetTrips (GetTripsRequest) returns(GetTripsResponse);
  rpc UpdateTrip (UpdateTripRequest) returns(Trip);
}